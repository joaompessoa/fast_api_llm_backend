services:
    
  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    volumes:
      - mongo_volume:/data/db
    ports:
      - '27018:27017'
    networks:
      - api_network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@localhost:27017?authSource=admin --quiet
      interval: 30s
      timeout: 10s
      retries: 5

  postgres:
    image: pgvector/pgvector:pg17
    shm_size: 4gb
    container_name: postgresql
    restart: aldoways
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DB: postgres
    volumes:
      - postgres_volume:/var/lib/postgresql/data
    ports:
      - '5433:5432'
    networks:
      - api_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres --quiet"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama:/root/.ollama
    networks:
      - api_network
    restart: unless-stopped


  chat_api:
    build:
      context: ${CWD}
      dockerfile: Dockerfile
    image: chat_api:0.1
    ports:
      - "5001:5000"
      - "8050:8050"
    volumes:
      - api_volume:/app
    networks:
      - api_network
    container_name: chat_api
    restart: unless-stopped
  
 
  

volumes:

  api_volume:
    external: true

  mongo_volume:
    external: true

  postgres_volume:
    external: true

  ollama:
    external: true

  
networks:
  api_network:
    name: api_network
    driver: bridge
    attachable: true
  